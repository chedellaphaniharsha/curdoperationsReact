{"ast":null,"code":"////import React, { Component } from 'react';\n////export class FetchData extends Component {\n////  static displayName = FetchData.name;\n////  constructor(props) {\n////    super(props);\n////    this.state = { forecasts: [], loading: true };\n////  }\n////  componentDidMount() {\n////    this.populateWeatherData();\n////  }\n////  static renderForecastsTable(forecasts) {\n////    return (\n////      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n////        <thead>\n////          <tr>\n////            <th>Date</th>\n////            <th>Temp. (C)</th>\n////            <th>Temp. (F)</th>\n////            <th>Summary</th>\n////          </tr>\n////        </thead>\n////        <tbody>\n////          {forecasts.map(forecast =>\n////            <tr key={forecast.date}>\n////              <td>{forecast.date}</td>\n////              <td>{forecast.temperatureC}</td>\n////              <td>{forecast.temperatureF}</td>\n////              <td>{forecast.summary}</td>\n////            </tr>\n////          )}\n////        </tbody>\n////      </table>\n////    );\n////  }\n////  render() {\n////    let contents = this.state.loading\n////      ? <p><em>Loading...</em></p>\n////      : FetchData.renderForecastsTable(this.state.forecasts);\n////    return (\n////      <div>\n////        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n////        <p>This component demonstrates fetching data from the server.</p>\n////        {contents}\n////      </div>\n////    );\n////  }\n////  async populateWeatherData() {\n////    const response = await fetch('weatherforecast');\n////    const data = await response.json();\n////    this.setState({ forecasts: data, loading: false });\n////  }\n////}","map":{"version":3,"names":[],"sources":["F:/react.js/ReactCurdOperations/curdoperationsReact/ClientApp/src/components/FetchData.js"],"sourcesContent":["////import React, { Component } from 'react';\r\n\r\n////export class FetchData extends Component {\r\n////  static displayName = FetchData.name;\r\n\r\n////  constructor(props) {\r\n////    super(props);\r\n////    this.state = { forecasts: [], loading: true };\r\n////  }\r\n\r\n////  componentDidMount() {\r\n////    this.populateWeatherData();\r\n////  }\r\n\r\n////  static renderForecastsTable(forecasts) {\r\n////    return (\r\n////      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n////        <thead>\r\n////          <tr>\r\n////            <th>Date</th>\r\n////            <th>Temp. (C)</th>\r\n////            <th>Temp. (F)</th>\r\n////            <th>Summary</th>\r\n////          </tr>\r\n////        </thead>\r\n////        <tbody>\r\n////          {forecasts.map(forecast =>\r\n////            <tr key={forecast.date}>\r\n////              <td>{forecast.date}</td>\r\n////              <td>{forecast.temperatureC}</td>\r\n////              <td>{forecast.temperatureF}</td>\r\n////              <td>{forecast.summary}</td>\r\n////            </tr>\r\n////          )}\r\n////        </tbody>\r\n////      </table>\r\n////    );\r\n////  }\r\n\r\n////  render() {\r\n////    let contents = this.state.loading\r\n////      ? <p><em>Loading...</em></p>\r\n////      : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n////    return (\r\n////      <div>\r\n////        <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n////        <p>This component demonstrates fetching data from the server.</p>\r\n////        {contents}\r\n////      </div>\r\n////    );\r\n////  }\r\n\r\n////  async populateWeatherData() {\r\n////    const response = await fetch('weatherforecast');\r\n////    const data = await response.json();\r\n////    this.setState({ forecasts: data, loading: false });\r\n////  }\r\n////}\r\n"],"mappings":"AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}